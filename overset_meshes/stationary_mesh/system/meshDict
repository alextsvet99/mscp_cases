/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                |
| \\      /  F ield         | cfMesh: A library for mesh generation          |
|  \\    /   O peration     |                                                |
|   \\  /    A nd           | Author: Franjo Juretic                         |
|    \\/     M anipulation  | E-mail: franjo.juretic@c-fields.com            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version   2.0;
    format    ascii;
    class     dictionary;
    location  "system";
    object    meshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// mandatory settings

surfaceFile "domain.fms";

maxCellSize 0.36864;

// optional settings

// size of the cells at the boundary
//boundaryCellSize 0.01; // [m]

// distance from the boundary at which bboundaryCellSize shall be used
//boundaryCellSizeRefinementThickness 0.1; // [m]

// minimum cell size allowed in the automatic refinement procedure
//minCellSize 0.01; // [m]


// refinement zones at the patches of the mesh
localRefinement
{
    /*ami
    {
        surfaceFile "ami.stl";
        //cellSize 0.04;
        refinementThickness 0.1;
        additionalRefinementLevels 3;
    }*/
}


// refinement zones inside the mesh based on primitive geometric shapes
objectRefinements
{
    ami
    {
        type        cone;
        p0          (-0.65 0 0); // (-0.35-surge_amplitude 0 0); 
        p1          ( 0.55 0 0); // ( 0.25+surge_amplitude 0 0);
        radius0     1.5;
        radius1     1.5;
        //cellSize 0.04;
        refinementThickness 0.1;
        additionalRefinementLevels 3;
    }
    
    wake
    {
        type        cone;
        p0          (-9.0 0 0);
        p1          (19.0 0 0);
        radius0     1.7; // 1.7 vs 2.0
        radius1     1.7;
        //cellSize    0.08;
        additionalRefinementLevels 2;
    }
    
    wake_tip
    {
        type        hollowCone;
        p0          (-9.0 0 0);
        p1          (19.0 0 0);
        radius0_Outer 1.5; // +
        radius0_Inner 1.0; // +
        radius1_Outer 1.5; 
        radius1_Inner 1.0;
        //cellSize    0.08;
        additionalRefinementLevels 3;
    }
    
    wake_root
    {
        type        cone;
        p0          (-9.0 0 0);
        p1          (19.0 0 0);
        radius0     0.4; // +
        radius1     0.4;
        //cellSize    0.08;
        additionalRefinementLevels 3;
    }
}


// refinement regions intersected by surfaces
surfaceMeshRefinement
{
}


// refinement regions intersected by edges
/*edgeMeshRefinement
{
    blade
    {
        edgeFile "blade_featureEdges.vtk";
        cellSize 0.001;
        //refinementThickness 0.01;
        //additionalRefinementLevels 4;
    }
    
    hub
    {
        edgeFile "hub_featureEdges.vtk";
        cellSize 0.002;
    }
}*/


// keep template cells which intersect boundary
//keepCellsIntersectingBoundary 0; // 1 keep or 0 only internal cells are used

// remove cells where distinct parts of the mesh are joined together
// active only when keepCellsIntersectingBoundary is active
//checkForGluedMesh 1; // 1 active or 0 inactive

// keep cells which intersect selected patches/subsets in the mesh template
// active when keepCellsIntersectingBoundary is switched off
/*keepCellsIntersectingPatches
{
    blades
    {
        keepCells 1; // 1 active or 0 inactive
    }
}*/

// remove cells which intersect selected patches/subsets from the mesh template 
// active when keepCellsIntersectingBoundary is switched on
/*removeCellsIntersectingPatches
{
    rotor
    {
        keepCells 1; // 1 active or 0 inactive
    }
}*/


// settings for boundary layers
/*boundaryLayers
{
    patchBoundaryLayers
    {
        HULL_AND_BOX_1
        {
            nLayers 5;
            thicknessRatio 1.1;
        }
    }

    optimiseLayer 1;

    optimisationParameters
    {
        nSmoothNormals 3;
        maxNumIterations 2;
        featureSizeFactor 0.4;
        reCalculateNormals 1;
        relThicknessTol 0.1;
    }
}*/

/*
anisotropicSources
{
    Box
    {
        type    box;
        centre  (2800 0 250);
        lengthX 6000;
        lengthY 1000;
        lengthZ 200;
        scaleX  1;
        scaleY  1;
        scaleZ  0.3;
    }


    planeUpper
    {
	type plane;
	normal (0 0 1);
	origin (0 0 250);
	scalingDistance 125;
	scalingFactor 0.5;
    }

    planeLower
    {
	type plane;
	normal (0 0 -1);
	origin (0 0 250);
	scalingDistance 125;
	scalingFactor 0.5;
    }

}*/

/*
workflowControls
{
//stopAfter templateGeneration;
//stopAfter surfaceTopology;
//stopAfter surfaceProjection;
//stopAfter patchAssignment;
//stopAfter edgeExtraction;
//stopAfter boundaryLayerGeneration;
//stopAfter meshOptimisation;
//stopAfter boundaryLayerRefinement;

//restartFromLatestStep 1;
}*/


// settings used for assigning new names to patches in the surface mesh
// when transferring them onto the volume mesh
renameBoundary
{
    //defaultName sides;
    //defaultType cyclic;

    newPatchNames
    {
        //ami { newName ami_outer; type patch; }
        inlet { newName inlet; type patch; }
        outlet { newName outlet; type patch; }
        sides { newName sides; type patch; }
    }
}


// stops the meshing process when it is not possible to capture all geometric features
//enforceGeometryConstraints 1; // 1 active or 0 inactive

/*meshQualitySettings
{
    maxNonOrthogonality 30;

    minTetQuality       1e-10;
}*/

// ************************************************************************* //
